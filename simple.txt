package main

// import (
// 	"fmt"
// 	"sync"
// 	"time"

// 	mqtt "github.com/eclipse/paho.mqtt.golang"
// )

// // Creating Options for mqtt client
// func createClientOptions(BrokerURL string) *mqtt.ClientOptions {

// 	opts := mqtt.NewClientOptions().AddBroker(BrokerURL)
// 	opts.SetKeepAlive(time.Second * 5)
// 	opts.SetCleanSession(true)
// 	opts.SetAutoReconnect(true)

// 	return opts
// }

// // Connecting to mqtt client
// func connect(opts *mqtt.ClientOptions, BrokerURL string) mqtt.Client {

// 	client := mqtt.NewClient(opts)

// 	token := client.Connect()
// 	if token.Wait() && token.Error() != nil {
// 		panic(token.Error())
// 	} else {
// 		fmt.Println("Mqtt server is ready: ", BrokerURL)
// 	}

// 	return client
// }

// func main() {

// 	const TOPIC = "myTopic"
// 	const BrokerURL = "tcp://localhost:1883"

// 	// Creating mqtt client options
// 	opts := createClientOptions(BrokerURL)

// 	// Connect to mqtt client
// 	client := connect(opts, BrokerURL)

// 	var wg sync.WaitGroup
// 	wg.Add(1)

// 	/* ===== Subscribe ===== */
// 	if token := client.Subscribe(TOPIC, 0, func(client mqtt.Client, msg mqtt.Message) {

// 		fmt.Printf("Subscriber Message recived:  %s", msg.Payload())
// 		wg.Done()

// 	}); token.Wait() && token.Error() != nil {
// 		panic(token.Error())
// 	}

// 	/* ======= Publish ======= */
// 	// if token := client.Publish(TOPIC, 0, false, "helllooooo"); token.Wait() && token.Error() != nil {
// 	// 	panic(token.Error())
// 	// }

// 	wg.Wait()
// }



===============================================================================================================


package main

// import (
// 	"fmt"
// 	"log"
// 	"net/url"
// 	"time"

// 	mqtt "github.com/eclipse/paho.mqtt.golang"
// )

// func connect(clientID string, uri *url.URL) mqtt.Client {

// 	opts := createClientOptions(clientID, uri)
// 	client := mqtt.NewClient(opts)
// 	token := client.Connect()

// 	for !token.WaitTimeout(3 * time.Second) {
// 	}

// 	if err := token.Error(); err != nil {
// 		panic(err)
// 	} else {
// 		fmt.Println("Mqtt server is ready: ", uri)
// 	}

// 	return client
// }

// func createClientOptions(clientID string, uri *url.URL) *mqtt.ClientOptions {

// 	opts := mqtt.NewClientOptions()
// 	opts.AddBroker(fmt.Sprintf("tcp://%s", uri.Host))
// 	// opts.SetUsername(uri.User.Username())
// 	// password, _ := uri.User.Password()
// 	// opts.SetPassword(password)
// 	opts.SetClientID(clientID)

// 	return opts
// }

// func listen(uri *url.URL, topic string) {

// 	/* Connect */
// 	client := connect("sub", uri)

// 	/* Subscribe */
// 	client.Subscribe(topic, 0, func(client mqtt.Client, msg mqtt.Message) {
// 		fmt.Printf("*Subscribe result: ==> [%s] %s\n", msg.Topic(), string(msg.Payload()))
// 	})
// }

// func main() {

// 	uri, err := url.Parse("mqtt://127.0.0.1:1883/myTopic") //iot.eclipse.org
// 	if err != nil {
// 		log.Fatal(err)
// 	}

// 	//Set Topic
// 	topic := uri.Path[1:len(uri.Path)]
// 	if topic == "" {
// 		topic = "test"
// 	}

// 	go listen(uri, topic)

// 	/* Connect */
// 	client := connect("pub", uri)

// 	/* Publish */
// 	// timer := time.NewTicker(1 * time.Second)
// 	// for t := range timer.C {
// 	// 	client.Publish(topic, 0, false, t.String())
// 	// }
// 	client.Publish(topic, 0, false, "Helooo There!!")
// }